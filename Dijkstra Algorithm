______________________________________________
Function of Dijkstra Algo.
______________________________________________

void dijkstra(vector<vector<pair<int,int>>>& graph, vector<int> &dist, int C, int D){
    //C: Sourse
    //D: Destination
    
    //QUEUE, PRIORITY_QUEUE, SET: Choose accordingly
    queue<pair<int,int>> data;
    data.push({0, C});
    
    dist[C] = 0;
    
    while(!data.empty()){
        pair<int,int> top = data.front();
        data.pop();
        int distance = top.first;
        int node = top.second;
        
        for(auto i: graph[node]){
            int nei = i.first;
            int wt = i.second;
            int distanceForDestination = distance + wt;       
            if(distanceForDestination < dist[nei]){   
                dist[nei] = distanceForDestination;
                if(nei == D){
                    return;
                }
                data.push({distanceForDestination, nei});
            }
        }
    }
    return;
}


_______________________________________________________
For construction of graph, dist vector
_______________________________________________________

    // n: No. of nodes

    vector<int> dist(n, INT_MAX);
    vector<vector<pair<int,int>>> graph(n);
    
    for(int i=0; i<edge.size(); i++){
        int n1 = edge[i][0];
        int n2 = edge[i][1];
        int wt = edge[i][2];
        graph[n1].push_back({n2,wt});
        graph[n2].push_back({n1,wt});
    }
    
    dijkstra(graph, dist, C, D);
